
/*
 * Do not edit this file. It has been auto generate by
 * ../core/codegen/gen_opcodes.py at 05/03/2014.
 */

#include <stdlib.h>
#include <stdio.h>
#include <bh_opcode.h>
#include <bh.h>
#include <stdbool.h>


/* Number of operands for operation
 *
 * @opcode Opcode for operation
 * @return Number of operands
 */
int bh_operands(bh_opcode opcode)
{
    switch(opcode)
    {
        case BH_ADD: return 3;
        case BH_SUBTRACT: return 3;
        case BH_MULTIPLY: return 3;
        case BH_DIVIDE: return 3;
        case BH_POWER: return 3;
        case BH_ABSOLUTE: return 2;
        case BH_GREATER: return 3;
        case BH_GREATER_EQUAL: return 3;
        case BH_LESS: return 3;
        case BH_LESS_EQUAL: return 3;
        case BH_EQUAL: return 3;
        case BH_NOT_EQUAL: return 3;
        case BH_LOGICAL_AND: return 3;
        case BH_LOGICAL_OR: return 3;
        case BH_LOGICAL_XOR: return 3;
        case BH_LOGICAL_NOT: return 2;
        case BH_MAXIMUM: return 3;
        case BH_MINIMUM: return 3;
        case BH_BITWISE_AND: return 3;
        case BH_BITWISE_OR: return 3;
        case BH_BITWISE_XOR: return 3;
        case BH_INVERT: return 2;
        case BH_LEFT_SHIFT: return 3;
        case BH_RIGHT_SHIFT: return 3;
        case BH_COS: return 2;
        case BH_SIN: return 2;
        case BH_TAN: return 2;
        case BH_COSH: return 2;
        case BH_SINH: return 2;
        case BH_TANH: return 2;
        case BH_ARCSIN: return 2;
        case BH_ARCCOS: return 2;
        case BH_ARCTAN: return 2;
        case BH_ARCSINH: return 2;
        case BH_ARCCOSH: return 2;
        case BH_ARCTANH: return 2;
        case BH_ARCTAN2: return 3;
        case BH_EXP: return 2;
        case BH_EXP2: return 2;
        case BH_EXPM1: return 2;
        case BH_LOG: return 2;
        case BH_LOG2: return 2;
        case BH_LOG10: return 2;
        case BH_LOG1P: return 2;
        case BH_SQRT: return 2;
        case BH_CEIL: return 2;
        case BH_TRUNC: return 2;
        case BH_FLOOR: return 2;
        case BH_RINT: return 2;
        case BH_MOD: return 3;
        case BH_ISNAN: return 2;
        case BH_ISINF: return 2;
        case BH_IDENTITY: return 2;
        case BH_DISCARD: return 1;
        case BH_FREE: return 1;
        case BH_SYNC: return 1;
        case BH_NONE: return 0;
        case BH_ADD_REDUCE: return 3;
        case BH_MULTIPLY_REDUCE: return 3;
        case BH_MINIMUM_REDUCE: return 3;
        case BH_MAXIMUM_REDUCE: return 3;
        case BH_LOGICAL_AND_REDUCE: return 3;
        case BH_BITWISE_AND_REDUCE: return 3;
        case BH_LOGICAL_OR_REDUCE: return 3;
        case BH_BITWISE_OR_REDUCE: return 3;
        case BH_LOGICAL_XOR_REDUCE: return 3;
        case BH_BITWISE_XOR_REDUCE: return 3;
        case BH_RANDOM: return 2;
        case BH_RANGE: return 1;
        case BH_REAL: return 2;
        case BH_IMAG: return 2;
        case BH_ADD_ACCUMULATE: return 3;
        case BH_MULTIPLY_ACCUMULATE: return 3;

    default:
        return 3;//Extension methods have 3 operands always
    }
}

/* Number of operands in instruction
 * NB: this function handles user-defined function correctly
 * @inst Instruction
 * @return Number of operands
 */
int bh_operands_in_instruction(const bh_instruction *inst)
{
    return bh_operands(inst->opcode);
}

/* Text descriptions for a given operation */
const char* _opcode_text[BH_NONE+1];
bool _opcode_text_initialized = false;

/* Text string for operation
 *
 * @opcode Opcode for operation
 * @return Text string.
 */
const char* bh_opcode_text(bh_opcode opcode)
{
    switch(opcode)
    {
        case BH_ADD: return "BH_ADD";
        case BH_SUBTRACT: return "BH_SUBTRACT";
        case BH_MULTIPLY: return "BH_MULTIPLY";
        case BH_DIVIDE: return "BH_DIVIDE";
        case BH_POWER: return "BH_POWER";
        case BH_ABSOLUTE: return "BH_ABSOLUTE";
        case BH_GREATER: return "BH_GREATER";
        case BH_GREATER_EQUAL: return "BH_GREATER_EQUAL";
        case BH_LESS: return "BH_LESS";
        case BH_LESS_EQUAL: return "BH_LESS_EQUAL";
        case BH_EQUAL: return "BH_EQUAL";
        case BH_NOT_EQUAL: return "BH_NOT_EQUAL";
        case BH_LOGICAL_AND: return "BH_LOGICAL_AND";
        case BH_LOGICAL_OR: return "BH_LOGICAL_OR";
        case BH_LOGICAL_XOR: return "BH_LOGICAL_XOR";
        case BH_LOGICAL_NOT: return "BH_LOGICAL_NOT";
        case BH_MAXIMUM: return "BH_MAXIMUM";
        case BH_MINIMUM: return "BH_MINIMUM";
        case BH_BITWISE_AND: return "BH_BITWISE_AND";
        case BH_BITWISE_OR: return "BH_BITWISE_OR";
        case BH_BITWISE_XOR: return "BH_BITWISE_XOR";
        case BH_INVERT: return "BH_INVERT";
        case BH_LEFT_SHIFT: return "BH_LEFT_SHIFT";
        case BH_RIGHT_SHIFT: return "BH_RIGHT_SHIFT";
        case BH_COS: return "BH_COS";
        case BH_SIN: return "BH_SIN";
        case BH_TAN: return "BH_TAN";
        case BH_COSH: return "BH_COSH";
        case BH_SINH: return "BH_SINH";
        case BH_TANH: return "BH_TANH";
        case BH_ARCSIN: return "BH_ARCSIN";
        case BH_ARCCOS: return "BH_ARCCOS";
        case BH_ARCTAN: return "BH_ARCTAN";
        case BH_ARCSINH: return "BH_ARCSINH";
        case BH_ARCCOSH: return "BH_ARCCOSH";
        case BH_ARCTANH: return "BH_ARCTANH";
        case BH_ARCTAN2: return "BH_ARCTAN2";
        case BH_EXP: return "BH_EXP";
        case BH_EXP2: return "BH_EXP2";
        case BH_EXPM1: return "BH_EXPM1";
        case BH_LOG: return "BH_LOG";
        case BH_LOG2: return "BH_LOG2";
        case BH_LOG10: return "BH_LOG10";
        case BH_LOG1P: return "BH_LOG1P";
        case BH_SQRT: return "BH_SQRT";
        case BH_CEIL: return "BH_CEIL";
        case BH_TRUNC: return "BH_TRUNC";
        case BH_FLOOR: return "BH_FLOOR";
        case BH_RINT: return "BH_RINT";
        case BH_MOD: return "BH_MOD";
        case BH_ISNAN: return "BH_ISNAN";
        case BH_ISINF: return "BH_ISINF";
        case BH_IDENTITY: return "BH_IDENTITY";
        case BH_DISCARD: return "BH_DISCARD";
        case BH_FREE: return "BH_FREE";
        case BH_SYNC: return "BH_SYNC";
        case BH_NONE: return "BH_NONE";
        case BH_ADD_REDUCE: return "BH_ADD_REDUCE";
        case BH_MULTIPLY_REDUCE: return "BH_MULTIPLY_REDUCE";
        case BH_MINIMUM_REDUCE: return "BH_MINIMUM_REDUCE";
        case BH_MAXIMUM_REDUCE: return "BH_MAXIMUM_REDUCE";
        case BH_LOGICAL_AND_REDUCE: return "BH_LOGICAL_AND_REDUCE";
        case BH_BITWISE_AND_REDUCE: return "BH_BITWISE_AND_REDUCE";
        case BH_LOGICAL_OR_REDUCE: return "BH_LOGICAL_OR_REDUCE";
        case BH_BITWISE_OR_REDUCE: return "BH_BITWISE_OR_REDUCE";
        case BH_LOGICAL_XOR_REDUCE: return "BH_LOGICAL_XOR_REDUCE";
        case BH_BITWISE_XOR_REDUCE: return "BH_BITWISE_XOR_REDUCE";
        case BH_RANDOM: return "BH_RANDOM";
        case BH_RANGE: return "BH_RANGE";
        case BH_REAL: return "BH_REAL";
        case BH_IMAG: return "BH_IMAG";
        case BH_ADD_ACCUMULATE: return "BH_ADD_ACCUMULATE";
        case BH_MULTIPLY_ACCUMULATE: return "BH_MULTIPLY_ACCUMULATE";

        default: return "Unknown opcode";
    }
}
    