#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp
%include "codegen/templates/warn.txt"
%include "codegen/templates/license.txt"

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using NumCIL.Generic;

%include "codegen/templates/typemap.cs"

%set $ops = $data[0]
%set $reduce_ops = $data[1]
%set $methods = $data[2]

%for $ctype, $bh_atype, $bh_ctype, $bh_enum in $ops
using ma_${bh_ctype} = NumCIL.Bohrium.PInvoke.bh_multi_array_${bh_ctype}_p;
%end for

namespace NumCIL.Bohrium
{
    internal static class RandomSuppliers
    {
        private static ulong m_seed;
        private static ulong m_index = 0;

        public static void SetSeed(ulong seed)
        {
            m_seed = seed;
            m_index = 0;
        }

        static RandomSuppliers()
        {
            var bytes = new byte[8];
            new Random().NextBytes(bytes);
            m_seed = BitConverter.ToUInt64(bytes, 0);
        }

%for $ctype, $bh_atype, $bh_ctype, $bh_enum in $ops
        public static void Random(ma_${bh_ctype} target)
        {
            lock(PinnedArrayTracker.ExecuteLock)
            {
                var len = target.DataSize;
                var view = NumCIL.Bohrium.Disposer.Create(PInvoke.bh_multi_array_${bh_ctype}_new_view(target, 1, 0, new long[] { len }, new long[] { 1 }));
                var tmp = NumCIL.Bohrium.Disposer.Create(PInvoke.bh_multi_array_uint64_new_random123((ulong)len, m_index, m_seed));
                {
                    m_index += (ulong)len;
                    PInvoke.bh_multi_array_${bh_ctype}_identity_uint64(view, tmp);
%if $bh_ctype == "float32" or $bh_ctype == "float64" or $bh_ctype == "complex64" or $bh_ctype == "complex128"           
                    PInvoke.bh_multi_array_${bh_ctype}_divide_scalar_rhs(view, view, bh_uint64.MaxValue);
%end if
                }
            }
        }
%end for
    }

    internal static class RangeSuppliers
    {
%for $ctype, $bh_atype, $bh_ctype, $bh_enum in $ops
        public static void Range(ma_${bh_ctype} target)
        {
            lock(PinnedArrayTracker.ExecuteLock)
            {    
                var len = target.DataSize;
                var view = NumCIL.Bohrium.Disposer.Create(PInvoke.bh_multi_array_${bh_ctype}_new_view(target, 1, 0, new long[] { len }, new long[] { 1 }));
                var tmp = NumCIL.Bohrium.Disposer.Create(PInvoke.bh_multi_array_uint64_new_range((ulong)len));
                    PInvoke.bh_multi_array_${bh_ctype}_identity_uint64(view, tmp);
            }
        }
%end for
    }

}

%for $ctype, $bh_atype, $bh_ctype, $bh_enum in $ops
namespace NumCIL.Bohrium
{
    public class ApplyImplementor_${bh_ctype} : ITypedApplyImplementor<${bh_atype}>
    {
        private Tuple<Type, Action<ma_${bh_ctype}>>[] m_nullOps = 
        {
%for $op, $opcode, $opname, $opcount, $typesigs, $cilname in $methods
%if $opcode != "BH_IDENTITY" and opcount == 1 and $cilname != ""
%for $op1_type, $op2_type in $typesigs
%if op1_type[2] == $bh_ctype and op2_type[2] == $bh_ctype
            new Tuple<Type, Action<ma_${bh_ctype}>>(typeof(${cilname}), PInvoke.bh_multi_array_${bh_ctype}_${opname}),
%end if
%end for
%end if
%end for
            new Tuple<Type, Action<ma_${bh_ctype}>>(typeof(NumCIL.Generic.IRandomOp), RandomSuppliers.Random),
            new Tuple<Type, Action<ma_${bh_ctype}>>(typeof(NumCIL.Generic.IRangeOp), RangeSuppliers.Range)
        };

        private Tuple<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}>>[] m_unOps = 
        {
%for $op, $opcode, $opname, $opcount, $typesigs, $cilname in $methods
%if $opcode != "BH_IDENTITY" and opcount == 2 and $cilname != ""
%for $op1_type, $op2_type in $typesigs
%if op1_type[2] == $bh_ctype and op2_type[2] == $bh_ctype
            new Tuple<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}>>(typeof(${cilname}), PInvoke.bh_multi_array_${bh_ctype}_${opname}),
%end if
%end for
%end if
%end for
        };

        private Tuple<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}, ma_${bh_ctype}>>[] m_binOps = 
        {
%for $op, $opcode, $opname, $opcount, $typesigs, $cilname in $methods
%if $opcode != "BH_IDENTITY" and opcount == 3 and $cilname != ""
%for $op1_type, $op2_type, $op3_type in $typesigs
%if op1_type[2] == $bh_ctype and op2_type[2] == $bh_ctype and op3_type[2] == $bh_ctype
            new Tuple<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}, ma_${bh_ctype}>>(typeof(${cilname}), PInvoke.bh_multi_array_${bh_ctype}_${opname}),
%end if
%end for
%end if
%end for
        };

        private Tuple<Type, Func<ma_${bh_ctype}, ${bh_atype}>>[] m_aggregateOps = 
        {
%if $bh_atype == "bh_bool8"
            new Tuple<Type, Func<ma_${bh_ctype}, ${bh_atype}>>(typeof(NumCIL.Generic.Operators.IAnd), PInvoke.bh_multi_array_${bh_ctype}_all),
            new Tuple<Type, Func<ma_${bh_ctype}, ${bh_atype}>>(typeof(NumCIL.Generic.Operators.IOr), PInvoke.bh_multi_array_${bh_ctype}_any),
%else        
            new Tuple<Type, Func<ma_${bh_ctype}, ${bh_atype}>>(typeof(NumCIL.Generic.Operators.IAdd), PInvoke.bh_multi_array_${bh_ctype}_sum),
            new Tuple<Type, Func<ma_${bh_ctype}, ${bh_atype}>>(typeof(NumCIL.Generic.Operators.IMul), PInvoke.bh_multi_array_${bh_ctype}_product),
%if $bh_atype != "bh_complex128" and $bh_atype != "bh_complex64"
            new Tuple<Type, Func<ma_${bh_ctype}, ${bh_atype}>>(typeof(NumCIL.Generic.Operators.IMax), PInvoke.bh_multi_array_${bh_ctype}_max),
            new Tuple<Type, Func<ma_${bh_ctype}, ${bh_atype}>>(typeof(NumCIL.Generic.Operators.IMin), PInvoke.bh_multi_array_${bh_ctype}_min),
%end if
%end if
        };     


        private Tuple<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}, long>>[] m_reduceOps = 
        {
            new Tuple<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}, long>>(typeof(NumCIL.Generic.Operators.IAdd), PInvoke.bh_multi_array_${bh_ctype}_add_reduce),
            new Tuple<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}, long>>(typeof(NumCIL.Generic.Operators.IMul), PInvoke.bh_multi_array_${bh_ctype}_multiply_reduce),
%if $bh_ctype != "complex64" and $bh_ctype != "complex128"
            new Tuple<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}, long>>(typeof(NumCIL.Generic.Operators.IMin), PInvoke.bh_multi_array_${bh_ctype}_minimum_reduce),
            new Tuple<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}, long>>(typeof(NumCIL.Generic.Operators.IMax), PInvoke.bh_multi_array_${bh_ctype}_maximum_reduce),
            
            new Tuple<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}, long>>(typeof(NumCIL.Generic.Operators.IAnd), PInvoke.bh_multi_array_${bh_ctype}_bitwise_and_reduce),
            new Tuple<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}, long>>(typeof(NumCIL.Generic.Operators.IOr), PInvoke.bh_multi_array_${bh_ctype}_bitwise_or_reduce),
            new Tuple<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}, long>>(typeof(NumCIL.Generic.Operators.IXor), PInvoke.bh_multi_array_${bh_ctype}_bitwise_xor_reduce),
            new Tuple<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}, long>>(typeof(NumCIL.Generic.Operators.IAnd), PInvoke.bh_multi_array_${bh_ctype}_logical_and_reduce),
            new Tuple<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}, long>>(typeof(NumCIL.Generic.Operators.IOr), PInvoke.bh_multi_array_${bh_ctype}_logical_or_reduce),
            new Tuple<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}, long>>(typeof(NumCIL.Generic.Operators.IXor), PInvoke.bh_multi_array_${bh_ctype}_logical_xor_reduce),
%end if
        };        

%if $bh_ctype == "bool8"
%for $ctype2, $bh_atype2, $bh_ctype2, $bh_enum2 in $ops
        private Dictionary<Type, Action<ma_bool8, ma_${bh_ctype2}, ma_${bh_ctype2}>> m_compareLookup_${bh_ctype2} = new Dictionary<Type, Action<ma_bool8, ma_${bh_ctype2}, ma_${bh_ctype2}>>();
        private Tuple<Type, Action<ma_bool8, ma_${bh_ctype2}, ma_${bh_ctype2}>>[] m_compareOps_${bh_ctype2} =
        {
            new Tuple<Type, Action<ma_bool8, ma_${bh_ctype2}, ma_${bh_ctype2}>>(typeof(NumCIL.Generic.Operators.IEqual), PInvoke.bh_multi_array_${bh_ctype2}_equal),
            new Tuple<Type, Action<ma_bool8, ma_${bh_ctype2}, ma_${bh_ctype2}>>(typeof(NumCIL.Generic.Operators.INotEqual), PInvoke.bh_multi_array_${bh_ctype2}_not_equal),
%if $bh_ctype2 != "complex64" and $bh_ctype2 != "complex128" and $bh_ctype2  != "bool8"
            new Tuple<Type, Action<ma_bool8, ma_${bh_ctype2}, ma_${bh_ctype2}>>(typeof(NumCIL.Generic.Operators.ILessThan), PInvoke.bh_multi_array_${bh_ctype2}_less),
            new Tuple<Type, Action<ma_bool8, ma_${bh_ctype2}, ma_${bh_ctype2}>>(typeof(NumCIL.Generic.Operators.IGreaterThan), PInvoke.bh_multi_array_${bh_ctype2}_greater),
            new Tuple<Type, Action<ma_bool8, ma_${bh_ctype2}, ma_${bh_ctype2}>>(typeof(NumCIL.Generic.Operators.ILessThanOrEqual), PInvoke.bh_multi_array_${bh_ctype2}_less_equal),
            new Tuple<Type, Action<ma_bool8, ma_${bh_ctype2}, ma_${bh_ctype2}>>(typeof(NumCIL.Generic.Operators.IGreaterThanOrEqual), PInvoke.bh_multi_array_${bh_ctype2}_greater_equal),
%end if
        };

%end for
%end if
        
        private Dictionary<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}, long>> m_reduceLookup = new Dictionary<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}, long>>();
        private Dictionary<Type, Func<ma_${bh_ctype}, ${bh_atype}>> m_aggregateLookup = new Dictionary<Type, Func<ma_${bh_ctype}, ${bh_atype}>>();
        private Dictionary<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}, ma_${bh_ctype}>> m_binOpLookup = new Dictionary<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}, ma_${bh_ctype}>>();
        private Dictionary<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}>> m_unOpLookup = new Dictionary<Type, Action<ma_${bh_ctype}, ma_${bh_ctype}>>();
        private Dictionary<Type, Action<ma_${bh_ctype}>> m_nullOpLookup = new Dictionary<Type, Action<ma_${bh_ctype}>>();

        #region ITypedApplyImplementor implementation

        public bool ApplyBinaryOp(Type c, NdArray<${bh_atype}> in1, NdArray<${bh_atype}> in2, NdArray<${bh_atype}> @out)
        {
            Action<ma_${bh_ctype}, ma_${bh_ctype}, ma_${bh_ctype}> m;
            // This lookup prevents a linear scan of the supported operands
            if (!m_binOpLookup.TryGetValue(c, out m))
            {
                m = (from n in m_binOps
                                    where n.Item1.IsAssignableFrom(c)
                                    select n.Item2).FirstOrDefault();
                m_binOpLookup[c] = m;
            }
        
            if (m == null)
            {
                Console.WriteLine("No registered match for: {0}", c.FullName);
                return false;
            }
                
            // If the accessor is CIL-managed, we register a GC handle for the array
            // If the input is used, no special action is performed until 
            // a sync is executed, then all the BH queue is flushed and 
            // the GC handles released

            var isUnmanaged = @out.DataAccessor is DataAccessor_${bh_ctype};                  
            lock(PinnedArrayTracker.ExecuteLock)
            {                        
                var v1 = NumCIL.Bohrium.Disposer.Create(new PInvoke.bh_multi_array_${bh_ctype}_p(@in1));
                var v2 = NumCIL.Bohrium.Disposer.Create(new PInvoke.bh_multi_array_${bh_ctype}_p(@in2));
                var v0 = NumCIL.Bohrium.Disposer.Create(new PInvoke.bh_multi_array_${bh_ctype}_p(@out));
                {
                    m(v0, v1, v2);

                    if (isUnmanaged)
                        ((DataAccessor_${bh_ctype})@out.DataAccessor).SetDirty();
                    else
                        v0.Sync();
                }
            }

            // If the output is CIL-managed, we must sync immediately
            if (!isUnmanaged)
                PinnedArrayTracker.Release();

            return true;
        }

        public bool ApplyBinaryConvOp<Ta>(Type c, NdArray<Ta> in1, NdArray<Ta> in2, NdArray<${bh_atype}> @out)
        {
%if $bh_ctype == "bool8"
%for $ctype2, $bh_atype2, $bh_ctype2, $bh_enum2 in $ops
            if (typeof(Ta) == typeof($bh_atype2))
            {
                Action<ma_bool8, ma_${bh_ctype2}, ma_${bh_ctype2}> m;
                if (!m_compareLookup_${bh_ctype2}.TryGetValue(c, out m))
                {
                    m = (from n in m_compareOps_${bh_ctype2}
                                        where n.Item1.IsAssignableFrom(c)
                                        select n.Item2).FirstOrDefault();
                    m_compareLookup_${bh_ctype2}[c] = m;
                }
            
                if (m == null)
                {
                    Console.WriteLine("No registered match for: {0}", c.FullName);
                    return false;
                }

                var isUnmanaged = @out.DataAccessor is DataAccessor_${bh_ctype};                  
                lock(PinnedArrayTracker.ExecuteLock)
                {
                    var v1 = NumCIL.Bohrium.Disposer.Create(new PInvoke.bh_multi_array_${bh_ctype2}_p((NdArray<${bh_atype2}>)(object)@in1));
                    var v2 = NumCIL.Bohrium.Disposer.Create(new PInvoke.bh_multi_array_${bh_ctype2}_p((NdArray<${bh_atype2}>)(object)@in2));
                    var v0 = NumCIL.Bohrium.Disposer.Create(new PInvoke.bh_multi_array_${bh_ctype}_p(@out));
                    {
                        m(v0, v1, v2);

                        if (isUnmanaged)
                            ((DataAccessor_${bh_ctype})@out.DataAccessor).SetDirty();
                        else
                            v0.Sync();
                    }
                }

                // If the output is CIL-managed, we must sync immediately
                if (!isUnmanaged)
                    PinnedArrayTracker.Release();

                return true;
            }
%end for
%end if
            return false;
        }

        public bool ApplyUnaryOp(Type c, NdArray<${bh_atype}> in1, NdArray<${bh_atype}> @out)
        {
            var isScalarIn1 = @in1.DataAccessor.GetType() == typeof(DefaultAccessor<${bh_atype}>) && @in1.DataAccessor.Length == 1;
            
            Action<NdArray<${bh_atype}>, NdArray<${bh_atype}>> exec = null;
            
            var isUnmanaged = @out.DataAccessor is DataAccessor_${bh_ctype};

            lock(PinnedArrayTracker.ExecuteLock)
            {            
                // Special handling of the copy operator as it happens "in-place" (kind-of)
                if (typeof(NumCIL.Generic.Operators.ICopyOperation).IsAssignableFrom(c))
                {
                    exec = (_in, _out) =>
                    {
                        if (isScalarIn1)
                        {
                            var v2 = NumCIL.Bohrium.Disposer.Create(new PInvoke.bh_multi_array_${bh_ctype}_p(_out));
                            {                                
                                PInvoke.bh_multi_array_${bh_ctype}_identity_${bh_ctype}_scalar(v2, _in.DataAccessor[0]);
                                if (!isUnmanaged)
                                    v2.Sync();
                            }
                        }
                        else
                        {
                            var v1 = NumCIL.Bohrium.Disposer.Create(new PInvoke.bh_multi_array_${bh_ctype}_p(_in));
                            var v2 = NumCIL.Bohrium.Disposer.Create(new PInvoke.bh_multi_array_${bh_ctype}_p(_out));
                            {
                                PInvoke.bh_multi_array_${bh_ctype}_identity_${bh_ctype}(v2, v1);
                                if (!isUnmanaged)
                                    v2.Sync();

                            }
                        }
                    };
                }
                        
                if (exec == null)
                {
                    Action<ma_${bh_ctype}, ma_${bh_ctype}> m;
                
                    // This lookup prevents a linear scan of the supported operands
                    if (!m_unOpLookup.TryGetValue(c, out m))
                    {
                        m = (from n in m_unOps
                                where n.Item1.IsAssignableFrom(c)
                                select n.Item2).FirstOrDefault();
                        m_unOpLookup[c] = m;
                    }
                    
                    if (m != null)
                    {
                        exec = (_in, _out) =>
                        {
                            var v1 = NumCIL.Bohrium.Disposer.Create(new PInvoke.bh_multi_array_${bh_ctype}_p(_in));
                            var v0 = NumCIL.Bohrium.Disposer.Create(new PInvoke.bh_multi_array_${bh_ctype}_p(_out));
                            {
                                m(v0, v1);
                                if (!isUnmanaged)
                                    v0.Sync();
                            }
                        };
                    }
                }
                
                if (exec == null)
                {
                    Console.WriteLine("No registered match for: {0}", c.FullName);
                    return false;
                }
                
                exec(@in1, @out);
                
                if (isUnmanaged)
                    ((DataAccessor_${bh_ctype})@out.DataAccessor).SetDirty();
                else
                    PinnedArrayTracker.Release();
                
                return true;
            }
        }

        private bool DoConvert<T>(NdArray<${bh_atype}> @out, Func<T> constructor, Action<ma_${bh_ctype}, T> converter)
            where T : IDisposable
        {
            var isUnmanaged = @out.DataAccessor is DataAccessor_${bh_ctype};
            lock(PinnedArrayTracker.ExecuteLock)
            {
                var v0 = NumCIL.Bohrium.Disposer.Create(new PInvoke.bh_multi_array_${bh_ctype}_p(@out));
                var v1 = NumCIL.Bohrium.Disposer.Create(constructor());
                {
                    converter(v0, v1);

                    if (isUnmanaged)
                        ((DataAccessor_${bh_ctype})@out.DataAccessor).SetDirty();
                    else
                        v0.Sync();
                }
            }

            if (!isUnmanaged)
                PinnedArrayTracker.Release();

            return true;
        }

        public bool ApplyUnaryConvOp<Ta>(Type c, NdArray<Ta> in1, NdArray<${bh_atype}> @out)
        {
            lock(PinnedArrayTracker.ExecuteLock)
            {        
                if (typeof(NumCIL.Generic.Operators.ITypeConversion).IsAssignableFrom(c))
                {
                    if (typeof(Ta) == typeof(${bh_atype}))
                        return ApplyUnaryOp(c, (NdArray<${bh_atype}>)(object)in1, @out);
%for $op, $opcode, $opname, $opcount, $typesigs, $cilname in $methods
%if $opcode == "BH_IDENTITY" and opcount == 2
%for $op1_type, $op2_type in $typesigs
%if op1_type[2] == $bh_ctype and op2_type[2] != $bh_ctype
                else if (typeof(Ta) == typeof(${op2_type[1]}))
                    return DoConvert(@out, 
                        () => new PInvoke.bh_multi_array_${op2_type[2]}_p((NdArray<${op2_type[1]}>)(object)in1),
                        PInvoke.bh_multi_array_${bh_ctype}_identity_${op2_type[2]});
%end if
%end for
%end if
%end for
                }
%if $bh_ctype == "float32"
                else if (typeof(NumCIL.Generic.Operators.IRealValue).IsAssignableFrom(c) && (typeof(Ta) == typeof(NumCIL.Complex64.DataType)))
                    return DoConvert(@out, 
                        () => new PInvoke.bh_multi_array_complex64_p((NdArray<NumCIL.Complex64.DataType>)(object)in1),
                        PInvoke.bh_multi_array_complex64_real);
                else if (typeof(NumCIL.Generic.Operators.IImaginaryValue).IsAssignableFrom(c) && (typeof(Ta) == typeof(NumCIL.Complex64.DataType)))
                    return DoConvert(@out, 
                        () => new PInvoke.bh_multi_array_complex64_p((NdArray<NumCIL.Complex64.DataType>)(object)in1),
                        PInvoke.bh_multi_array_complex64_imag);
%end if
%if $bh_ctype == "float64"
                else if (typeof(NumCIL.Generic.Operators.IRealValue).IsAssignableFrom(c) && (typeof(Ta) == typeof(System.Numerics.Complex)))
                    return DoConvert(@out, 
                        () => new PInvoke.bh_multi_array_complex128_p((NdArray<System.Numerics.Complex>)(object)in1),
                        PInvoke.bh_multi_array_complex128_real);
                else if (typeof(NumCIL.Generic.Operators.IImaginaryValue).IsAssignableFrom(c) && (typeof(Ta) == typeof(System.Numerics.Complex)))
                    return DoConvert(@out, 
                        () => new PInvoke.bh_multi_array_complex128_p((NdArray<System.Numerics.Complex>)(object)in1),
                        PInvoke.bh_multi_array_complex128_imag);
%end if

                return false;
            }
        }

        public bool ApplyNullaryOp(Type c, NdArray<${bh_atype}> @out)
        {
            Action<ma_${bh_ctype}> m;
            // This lookup prevents a linear scan of the supported operands
            if (!m_nullOpLookup.TryGetValue(c, out m))
            {
                m = (from n in m_nullOps
                                    where n.Item1.IsAssignableFrom(c)
                                    select n.Item2).FirstOrDefault();
                m_nullOpLookup[c] = m;
            }
        
            if (m == null)
            {
                Console.WriteLine("No registered match for: {0}", c.FullName);
                return false;
            }

            var isUnmanaged = @out.DataAccessor is DataAccessor_${bh_ctype};

            lock(PinnedArrayTracker.ExecuteLock)                
            {
                var v0 = NumCIL.Bohrium.Disposer.Create(new PInvoke.bh_multi_array_${bh_ctype}_p(@out));
                {
                    m(v0);

                    if (isUnmanaged)
                        ((DataAccessor_${bh_ctype})@out.DataAccessor).SetDirty();
                    else
                        v0.Sync();
                }
            }

            // If the output is CIL-managed, we must sync immediately
            if (!isUnmanaged)
                PinnedArrayTracker.Release();

            return true;
        }

        public bool ApplyReduce(Type c, long axis, NdArray<${bh_atype}> in1, NdArray<${bh_atype}> @out)
        {
            Action<ma_${bh_ctype}, ma_${bh_ctype}, long> m;
            if (!m_reduceLookup.TryGetValue(c, out m))
            {
                m = (from n in m_reduceOps
                                 where n.Item1.IsAssignableFrom(c)
                                 select n.Item2).FirstOrDefault();
                m_reduceLookup[c] = m;
            }
            
            if (m == null)
            {
                Console.WriteLine("No registered match for reduce: {0}: {1}", c.FullName, in1.DataAccessor.GetType().FullName);
                return false;
            }

            var isUnmanaged = @out.DataAccessor is DataAccessor_${bh_ctype};

            lock(PinnedArrayTracker.ExecuteLock)
            {            
                var v1 = NumCIL.Bohrium.Disposer.Create(new PInvoke.bh_multi_array_${bh_ctype}_p(@in1));
                var v0 = NumCIL.Bohrium.Disposer.Create(new PInvoke.bh_multi_array_${bh_ctype}_p(@out));
                {
                    m(v0, v1, axis);

                    if (isUnmanaged)
                        ((DataAccessor_${bh_ctype})@out.DataAccessor).SetDirty();
                    else
                        v0.Sync();
                }

            }

            if (!isUnmanaged)
                PinnedArrayTracker.Release();
            return true;
        }

        public bool ApplyMatmul(Type cadd, Type cmul, NdArray<${bh_atype}> in1, NdArray<${bh_atype}> in2, NdArray<${bh_atype}> @out = null)
        {
            return false;
        }

        public bool ApplyAggregate(Type c, NdArray<${bh_atype}> in1, out ${bh_atype} result)
        {
            Func<ma_${bh_ctype}, ${bh_atype}> m;
            if (!m_aggregateLookup.TryGetValue(c, out m))
            {
                m = (from n in m_aggregateOps
                                 where n.Item1.IsAssignableFrom(c)
                                 select n.Item2).FirstOrDefault();
                m_aggregateLookup[c] = m;
            }

            if (m == null)
            {
                Console.WriteLine("No registered match for aggregate: {0}: {1}", c.FullName, in1.DataAccessor.GetType().FullName);
                result = default(${bh_atype});
                return false;
            }

            lock(PinnedArrayTracker.ExecuteLock)    
            {
                var v1 = NumCIL.Bohrium.Disposer.Create(new PInvoke.bh_multi_array_${bh_ctype}_p(@in1));
                    result = m(v1);
            }

            return true;
        }

        #endregion
    }       
}

%end for