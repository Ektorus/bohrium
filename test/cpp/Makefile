# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.
BH_ROOT=../..
BH_HEADER=$(BH_ROOT)/include
BH_CPP_BRIDGE=$(BH_ROOT)/bridge/cpp/

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = gtest

# Where to find user code.
USER_DIR = .
BIN_DIR = bin

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include -I$(BH_CPP_BRIDGE) -I$(BH_HEADER)

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra  -std=c++0x -DDEBUG

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = assignment broadcasting compound constructor iterator function_scope loop_scope operators slicing reduction

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(BIN_DIR)/* *.o

run :
	@echo 'Running Tests'
	for TEST in $(TESTS); do $(BIN_DIR)/$$TEST; done

assignment.o : $(USER_DIR)/assignment.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/assignment.cpp

assignment: assignment.o gtest_main.a
	$(CXX) -L$(BH_ROOT)/core $(CPPFLAGS) $(CXXFLAGS) $^ -o $(BIN_DIR)/$@ -lpthread -lbh

broadcasting.o : $(USER_DIR)/broadcasting.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/broadcasting.cpp

broadcasting: broadcasting.o gtest_main.a
	$(CXX) -L$(BH_ROOT)/core $(CPPFLAGS) $(CXXFLAGS) $^ -o $(BIN_DIR)/$@ -lpthread -lbh

compound.o : $(USER_DIR)/compound.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/compound.cpp

compound: compound.o gtest_main.a
	$(CXX) -L$(BH_ROOT)/core $(CPPFLAGS) $(CXXFLAGS) $^ -o $(BIN_DIR)/$@ -lpthread -lbh

constructor.o : $(USER_DIR)/constructor.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/constructor.cpp

constructor: constructor.o gtest_main.a
	$(CXX) -L$(BH_ROOT)/core $(CPPFLAGS) $(CXXFLAGS) $^ -o $(BIN_DIR)/$@ -lpthread -lbh

iterator.o : $(USER_DIR)/iterator.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/iterator.cpp

iterator: iterator.o gtest_main.a
	$(CXX) -L$(BH_ROOT)/core $(CPPFLAGS) $(CXXFLAGS) $^ -o $(BIN_DIR)/$@ -lpthread -lbh

loop_scope.o : $(USER_DIR)/loop_scope.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/loop_scope.cpp

loop_scope: loop_scope.o gtest_main.a
	$(CXX) -L$(BH_ROOT)/core $(CPPFLAGS) $(CXXFLAGS) $^ -o $(BIN_DIR)/$@ -lpthread -lbh

function_scope.o : $(USER_DIR)/function_scope.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/function_scope.cpp

function_scope: function_scope.o gtest_main.a
	$(CXX) -L$(BH_ROOT)/core $(CPPFLAGS) $(CXXFLAGS) $^ -o $(BIN_DIR)/$@ -lpthread -lbh

operators.o : $(USER_DIR)/operators.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/operators.cpp

operators: operators.o gtest_main.a
	$(CXX) -L$(BH_ROOT)/core $(CPPFLAGS) $(CXXFLAGS) $^ -o $(BIN_DIR)/$@ -lpthread -lbh

slicing.o : $(USER_DIR)/slicing.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/slicing.cpp

slicing: slicing.o gtest_main.a
	$(CXX) -L$(BH_ROOT)/core $(CPPFLAGS) $(CXXFLAGS) $^ -o $(BIN_DIR)/$@ -lpthread -lbh

reduction.o : $(USER_DIR)/reduction.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/reduction.cpp

reduction: reduction.o gtest_main.a
	$(CXX) -L$(BH_ROOT)/core $(CPPFLAGS) $(CXXFLAGS) $^ -o $(BIN_DIR)/$@ -lpthread -lbh


