#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp
/*
This file is part of cphVB and copyright (c) 2012 the cphVB team:
http://cphvb.bitbucket.org

cphVB is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 
of the License, or (at your option) any later version.

cphVB is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the 
GNU Lesser General Public License along with cphVB. 

If not, see <http://www.gnu.org/licenses/>.
*/
 
#include <cphvb.h>
#include <assert.h>

typedef char BYTE;

#define INNER_LOOP_AAA(opcode_func, fulls, remainder, d0, d1, d2, stride0, stride1, stride2) \
{ \
	cphvb_index loop_i; \
	for (loop_i = 0; loop_i < fulls; loop_i++) \
	{ \
		opcode_func( ((T0*)d0), ((T1*)d1), ((T2*)d2) ); \
		d0 += stride0; \
		d1 += stride1; \
		d2 += stride2; \
		opcode_func( ((T0*)d0), ((T1*)d1), ((T2*)d2) ); \
		d0 += stride0; \
		d1 += stride1; \
		d2 += stride2; \
		opcode_func( ((T0*)d0), ((T1*)d1), ((T2*)d2) ); \
		d0 += stride0; \
		d1 += stride1; \
		d2 += stride2; \
		opcode_func( ((T0*)d0), ((T1*)d1), ((T2*)d2) ); \
		d0 += stride0; \
		d1 += stride1; \
		d2 += stride2; \
	} \
 \
	switch (remainder) \
	{ \
		case 3: \
			opcode_func( ((T0*)d0), ((T1*)d1), ((T2*)d2) ); \
			d0 += stride0; \
			d1 += stride1; \
			d2 += stride2; \
		case 2: \
			opcode_func( ((T0*)d0), ((T1*)d1), ((T2*)d2) ); \
			d0 += stride0; \
			d1 += stride1; \
			d2 += stride2; \
		case 1: \
			opcode_func( ((T0*)d0), ((T1*)d1), ((T2*)d2) ); \
			d0 += stride0; \
			d1 += stride1; \
			d2 += stride2; \
	} \
}

#define INNER_LOOP_AAC(opcode_func, fulls, remainder, d0, d1, c, stride0, stride1) \
{ \
	cphvb_index loop_i; \
	for (loop_i = 0; loop_i < fulls; loop_i++) \
	{ \
		opcode_func( ((T0*)d0), ((T1*)d1), c ); \
		d0 += stride0; \
		d1 += stride1; \
		opcode_func( ((T0*)d0), ((T1*)d1), c ); \
		d0 += stride0; \
		d1 += stride1; \
		opcode_func( ((T0*)d0), ((T1*)d1), c ); \
		d0 += stride0; \
		d1 += stride1; \
		opcode_func( ((T0*)d0), ((T1*)d1), c ); \
		d0 += stride0; \
		d1 += stride1; \
	} \
 \
	switch (remainder) \
	{ \
		case 3: \
			opcode_func( ((T0*)d0), ((T1*)d1), c ); \
			d0 += stride0; \
			d1 += stride1; \
		case 2: \
			opcode_func( ((T0*)d0), ((T1*)d1), c ); \
			d0 += stride0; \
			d1 += stride1; \
		case 1: \
			opcode_func( ((T0*)d0), ((T1*)d1), c ); \
			d0 += stride0; \
			d1 += stride1; \
	} \
}

#define INNER_LOOP_ACA(opcode_func, fulls, remainder, d0, c, d2, stride0, stride2) \
{ \
	cphvb_index loop_i; \
	for (loop_i = 0; loop_i < fulls; loop_i++) \
	{ \
		opcode_func( ((T0*)d0), c, ((T2*)d2) ); \
		d0 += stride0; \
		d2 += stride2; \
		opcode_func( ((T0*)d0), c, ((T2*)d2) ); \
		d0 += stride0; \
		d2 += stride2; \
		opcode_func( ((T0*)d0), c, ((T2*)d2) ); \
		d0 += stride0; \
		d2 += stride2; \
		opcode_func( ((T0*)d0), c, ((T2*)d2) ); \
		d0 += stride0; \
		d2 += stride2; \
	} \
 \
	switch (remainder) \
	{ \
		case 3: \
			opcode_func( ((T0*)d0), c, ((T2*)d2) ); \
			d0 += stride0; \
			d2 += stride2; \
		case 2: \
			opcode_func( ((T0*)d0), c, ((T2*)d2) ); \
			d0 += stride0; \
			d2 += stride2; \
		case 1: \
			opcode_func( ((T0*)d0), c, ((T2*)d2) ); \
			d0 += stride0; \
			d2 += stride2; \
	} \
}


#define INNER_LOOP_AA(opcode_func, fulls, remainder, d0, d1, stride0, stride1) \
{ \
	cphvb_index loop_i; \
	for (loop_i = 0; loop_i < fulls; loop_i++) \
	{ \
		opcode_func( ((T0*)d0), ((T1*)d1) ); \
		d0 += stride0; \
		d1 += stride1; \
		opcode_func( ((T0*)d0), ((T1*)d1) ); \
		d0 += stride0; \
		d1 += stride1; \
		opcode_func( ((T0*)d0), ((T1*)d1) ); \
		d0 += stride0; \
		d1 += stride1; \
		opcode_func( ((T0*)d0), ((T1*)d1) ); \
		d0 += stride0; \
		d1 += stride1; \
	} \
 \
	switch (remainder) \
	{ \
		case 3: \
			opcode_func( ((T0*)d0), ((T1*)d1) ); \
			d0 += stride0; \
			d1 += stride1; \
		case 2: \
			opcode_func( ((T0*)d0), ((T1*)d1) ); \
			d0 += stride0; \
			d1 += stride1; \
		case 1: \
			opcode_func( ((T0*)d0), ((T1*)d1) ); \
			d0 += stride0; \
			d1 += stride1; \
	} \
}

#define INNER_LOOP_AC(opcode_func, fulls, remainder, d0, c, stride0) \
{ \
	cphvb_index loop_i; \
	for (loop_i = 0; loop_i < fulls; loop_i++) \
	{ \
		opcode_func( ((T0*)d0), (c) ); \
		d0 += stride0; \
		opcode_func( ((T0*)d0), (c) ); \
		d0 += stride0; \
		opcode_func( ((T0*)d0), (c) ); \
		d0 += stride0; \
		opcode_func( ((T0*)d0), (c) ); \
		d0 += stride0; \
	} \
 \
	switch (remainder) \
	{ \
		case 3: \
			opcode_func( ((T0*)d0), (c) ); \
			d0 += stride0; \
		case 2: \
			opcode_func( ((T0*)d0), (c) ); \
			d0 += stride0; \
		case 1: \
			opcode_func( ((T0*)d0), (c) ); \
			d0 += stride0; \
	} \
}

%for $traverse in $data
/**
 *  A optimized implementation of executing an instruction.
 *
 *  @param instr The instruction to execute
 *  @param state State of the iteration
 *  @param nelements the number of elements on which the instruction should be applied.
 *  @return This function always returns CPHVB_SUCCESS unless it raises an exception with assert.
 */
template <${traverse.tsig}, typename Instr>
cphvb_error traverse_${traverse.sig}( cphvb_instruction *instr, cphvb_tstate* state ) {

    Instr opcode_func;                        	// Element-wise functor-pointer

    cphvb_index i, j;                        	// Traversal variables

    BYTE* d0;									// Pointers to start of data elements
    %for $op_n, $op_t in $traverse.ops[1:]
    %if $op_t == 'a'
    BYTE* d${op_n};
    %end if
    %end for

    size_t elsize0 = sizeof(T0);				// We use the size for explicit multiplication
    %for $op_n, $op_t in $traverse.ops[1:]
    %if $op_t == 'a'
    size_t elsize${op_n} = sizeof(T${op_n});
    %end if
    %end for

    d0 = (BYTE*) cphvb_base_array(instr->operand[0])->data;
    %for $op_n, $op_t in $traverse.ops[1:]
    %if $op_t == 'a'
    d${op_n} = (BYTE*) cphvb_base_array(instr->operand[${op_n}])->data;
    %else
    T${op_n}* c = (T${op_n}*) &(instr->constant.value);
    %end if
    %end for

    assert(d0 != NULL);                         // Ensure that data is allocated
    %for $op_n, $op_t in $traverse.ops[1:]
    %if $op_t == 'a'
    assert(d${op_n} != NULL);
    %else
    assert(c != NULL);
    %end if
    %end for

	d0 += state->start[0] * elsize0;			// Compute offsets
    %for $op_n, $op_t in $traverse.ops[1:]
    %if $op_t == 'a'
    d${op_n} += state->start[${op_n}] * elsize${op_n};
    %end if
    %end for
		
	if (state->ndim == 1)
	{
		// Simple 1D loop
		cphvb_index stride0 = state->stride[0][0] * elsize0;
        %for $op_n, $op_t in $traverse.ops[1:]
        %if $op_t == 'a'
		cphvb_index stride${op_n} = state->stride[${op_n}][0] * elsize${op_n};
        %end if
        %end for
		
		cphvb_index total_ops = state->shape[0];

		cphvb_index remainder = total_ops % 4;
		cphvb_index fulls = total_ops / 4;

		//Macro magic time!
        %echo '        INNER_LOOP_'+$traverse.sig.upper()+'(opcode_func, fulls, remainder, '
        %for $op_n, $op_t in $traverse.ops
        %if $op_t == 'a'
        %echo 'd'+str($op_n)+', '
        %else
        %echo 'c, '
        %end if
        %end for
        %set sep=''
        %for $op_n, $op_t in $traverse.ops
        %if $op_t == 'a'
        %echo $sep+"stride"+str($op_n)
        %set sep=', '
        %end if
        %end for
        %echo ');'
        %slurp

	}
	else if(state->ndim == 2)
	{
		cphvb_index ops_outer = state->shape[0];
		cphvb_index ops_inner = state->shape[1];
		
		cphvb_index outer_stride0 = state->stride[0][0] * elsize0;
        %for $op_n, $op_t in $traverse.ops[1:]
        %if $op_t == 'a'
		cphvb_index outer_stride${op_n} = state->stride[${op_n}][0] * elsize${op_n};
        %end if
        %end for

		// Basic 2D loop with unrolling
		cphvb_index inner_stride0 = state->stride[0][1] * elsize0;
        %for $op_n, $op_t in $traverse.ops[1:]
        %if $op_t == 'a'
		cphvb_index inner_stride${op_n} = state->stride[${op_n}][1] * elsize${op_n};
        %end if
        %end for

		outer_stride0 -= inner_stride0 * state->shape[1];
        %for $op_n, $op_t in $traverse.ops[1:]
        %if $op_t == 'a'
		outer_stride${op_n} -= inner_stride${op_n} * state->shape[1];
        %end if
        %end for

		cphvb_index remainder = ops_inner % 4;
		cphvb_index fulls = ops_inner / 4;

		for (i = 0; i < ops_outer; i++)
		{
			//Macro magic time!
            %echo '            INNER_LOOP_'+$traverse.sig.upper()+'(opcode_func, fulls, remainder, '
            %for $op_n, $op_t in $traverse.ops
            %if $op_t == 'a'
            %echo 'd'+str($op_n)+', '
            %else
            %echo 'c, '
            %end if
            %end for
            %set sep=''
            %for $op_n, $op_t in $traverse.ops
            %if $op_t == 'a'
            %echo $sep+"inner_stride"+str($op_n)
            %set sep=', '
            %end if
            %end for
            %echo ');'
            %slurp

			d0 += outer_stride0;
            %for $op_n, $op_t in $traverse.ops[1:]
            %if $op_t == 'a'
			d${op_n} += outer_stride${op_n};
            %end if
            %end for

		}
	}
	else
	{
		//General case, optimal up to 3D, and almost optimal for 4D
		cphvb_index n = state->ndim - 3;
		cphvb_index counters[CPHVB_MAXDIM - 3];
		memset(&counters, 0, sizeof(cphvb_index) * n);		

		cphvb_index total_ops = 1;
		for(i = 0; i < n; i++)
			total_ops *= state->shape[i];
			
		//This chunk of variables prevents repeated calculations of offsets
		cphvb_index dim_index0 = n + 0;
		cphvb_index dim_index1 = n + 1;
		cphvb_index dim_index2 = n + 2;

		cphvb_index ops_outer = state->shape[dim_index0];
		cphvb_index ops_inner = state->shape[dim_index1];
		cphvb_index ops_inner_inner = state->shape[dim_index2];

		cphvb_index outer_stride0 = state->stride[0][dim_index0] * elsize0;
        %for $op_n, $op_t in $traverse.ops[1:]
        %if $op_t == 'a'
		cphvb_index outer_stride${op_n} = state->stride[${op_n}][dim_index0] * elsize${op_n};
        %end if
        %end for

		cphvb_index inner_stride0 = state->stride[0][dim_index1] * elsize0;
        %for $op_n, $op_t in $traverse.ops[1:]
        %if $op_t == 'a'
		cphvb_index inner_stride${op_n} = state->stride[${op_n}][dim_index1] * elsize${op_n};
        %end if
        %end for

		cphvb_index inner_inner_stride0 = state->stride[0][dim_index2] * elsize0;
        %for $op_n, $op_t in $traverse.ops[1:]
        %if $op_t == 'a'
		cphvb_index inner_inner_stride${op_n} = state->stride[${op_n}][dim_index2] * elsize${op_n};
        %end if
        %end for

		outer_stride0 -= inner_stride0 * state->shape[dim_index1];
        %for $op_n, $op_t in $traverse.ops[1:]
        %if $op_t == 'a'
		outer_stride${op_n} -= inner_stride${op_n} * state->shape[dim_index1];
        %end if
        %end for

		inner_stride0 -= inner_inner_stride0 * state->shape[dim_index2];
        %for $op_n, $op_t in $traverse.ops[1:]
        %if $op_t == 'a'
		inner_stride${op_n} -= inner_inner_stride${op_n} * state->shape[dim_index2];
        %end if
        %end for

		cphvb_index remainder = ops_inner_inner % 4;
		cphvb_index fulls = ops_inner_inner / 4;

		BYTE* d0_orig = d0;
        %for $op_n, $op_t in $traverse.ops[1:]
        %if $op_t == 'a'
		BYTE* d${op_n}_orig = d${op_n};
        %end if
        %end for

		while (total_ops-- > 0)
		{
			for (i = 0; i < ops_outer; i++)
			{
				for (j = 0; j < ops_inner; j++)
				{
					//Macro magic time!
                    %echo '                    INNER_LOOP_'+$traverse.sig.upper()+'(opcode_func, fulls, remainder, '
                    %for $op_n, $op_t in $traverse.ops
                    %if $op_t == 'a'
                    %echo 'd'+str($op_n)+', '
                    %else
                    %echo 'c, '
                    %end if
                    %end for
                    %set sep=''
                    %for $op_n, $op_t in $traverse.ops
                    %if $op_t == 'a'
                    %echo $sep+"inner_inner_stride"+str($op_n)
                    %set sep=', '
                    %end if
                    %end for
                    %echo ');'
                    %slurp

					d0 += inner_stride0;
                    %for $op_n, $op_t in $traverse.ops[1:]
                    %if $op_t == 'a'
					d${op_n} += inner_stride${op_n};
                    %end if
                    %end for
				}

				d0 += outer_stride0;
                %for $op_n, $op_t in $traverse.ops[1:]
                %if $op_t == 'a'
				d${op_n} += outer_stride${op_n};
                %end if
                %end for
			}

			if (n > 0)
			{
				//Basically a ripple carry adder
				long p = n - 1;

				// Move one in current dimension
				d0_orig += (state->stride[0][p] * elsize0);
                %for $op_n, $op_t in $traverse.ops[1:]
                %if $op_t == 'a'
				d${op_n}_orig += (state->stride[${op_n}][p] * elsize${op_n});
                %end if
                %end for

				while (++counters[p] == state->shape[p] && p > 0)
				{
					//Update to move in the outer dimension, on carry
					d0_orig += ((state->stride[0][p-1]) - (state->shape[p] * state->stride[0][p])) * elsize0;
                    %for $op_n, $op_t in $traverse.ops[1:]
                    %if $op_t == 'a'
					d${op_n}_orig += ((state->stride[${op_n}][p-1]) - (state->shape[p] * state->stride[${op_n}][p])) * elsize${op_n};
                    %end if
                    %end for

					counters[p] = 0;
					p--;
				}
				
				d0 = d0_orig;
                %for $op_n, $op_t in $traverse.ops[1:]
                %if $op_t == 'a'
				d${op_n} = d${op_n}_orig;
                %end if
                %end for

			}
		}		
	}

    return CPHVB_SUCCESS;

}

%end for


%for $traverse in $data
/**
 *  A naive implementation of executing an instruction.
 *
 *  @param instr The instruction to execute
 *  @param state State of the iteration
 *  @param nelements the number of elements on which the instruction should be applied.
 *  @return This function always returns CPHVB_SUCCESS unless it raises an exception with assert.
 */
template <${traverse.tsig}, typename Instr>
cphvb_error traverse_naive_${traverse.sig}( cphvb_instruction *instr, cphvb_tstate_naive* state, cphvb_index nelements ) {

    Instr opcode_func;                          // Element-wise functor-pointer

    cphvb_array *a0 = instr->operand[0];        // Operand pointers
    %for $op in $traverse.ops[1:]
    %if $op[1] == 'a'
    cphvb_array *a$op[0] = instr->operand[$op[0]];
    %end if
    %end for
                                                // Pointers to start of data elements
    T0* d0 = (T0*) cphvb_base_array(instr->operand[0])->data;
    %for $op in $traverse.ops[1:]
    %if $op[1] == 'a'
    T$op[0]* d$op[0] = (T$op[0]*) cphvb_base_array(instr->operand[$op[0]])->data;
    %else
    T$op[0]* d$op[0] = (T$op[0]*) &(instr->constant.value);
    %end if
    %end for

    assert(d0 != NULL);                         // Ensure that data is allocated
    %for $op in $traverse.ops[1:]
    %if $op[1] == 'a'
    assert(d$op[0] != NULL);
    %end if
    %end for

    cphvb_index j,                              // Traversal variables
                last_dim    = a0->ndim-1,
                last_e      = (nelements>0) ? nelements-1 : cphvb_nelements( a0->ndim, a0->shape )-1;

    cphvb_index off0;                           // Stride-offset
    %for $op in $traverse.ops[1:]
    %if $op[1] == 'a'
    cphvb_index off$op[0];
    %end if
    %end for

    while( state->cur_e <= last_e )
    {
        off0 = a0->start;                           // Compute offset based on coord
        %for $op in $traverse.ops[1:]
        %if $op[1] == 'a'
        off$op[0] = a$op[0]->start;
        %end if
        %end for

        for( j=0; j<=last_dim; ++j)
        {
            off0 += state->coord[j] * a0->stride[j];
            %for $op in $traverse.ops[1:]
            %if $op[1] == 'a'
            off$op[0] += state->coord[j] * a$op[0]->stride[j];
            %end if
            %end for
        }
                                                    // Iterate over "last" / "innermost" dimension
        for(; (state->coord[last_dim] < a0->shape[last_dim]) && (state->cur_e <= last_e); state->coord[last_dim]++, state->cur_e++ )    
        {
            opcode_func( ${traverse.func_call} );

            off0 += a0->stride[last_dim];
            %for $op in $traverse.ops[1:]
            %if $op[1] == 'a'
            off$op[0] += a$op[0]->stride[last_dim];
            %end if
            %end for
        }

        if (state->coord[last_dim] >= a0->shape[last_dim])
        {
            state->coord[last_dim] = 0;
            for(j = last_dim-1; j >= 0; --j)            // Increment coordinates for the remaining dimensions
            {
                state->coord[j]++;
                if (state->coord[j] < a0->shape[j]) {   // Still within this dimension
                    break;
                } else {                                // Reached the end of this dimension
                    state->coord[j] = 0;                // Reset coordinate
                }                                       // Loop then continues to increment the next dimension
            }
        }

    }

    return CPHVB_SUCCESS;

}

%end for


