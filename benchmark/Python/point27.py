import util
if util.Benchmark().bohrium:
    import bohrium as np
else:
    import numpy as np
from bohrium.stdviews import no_border, D3P27

def point27_init(size):
    """TODO: Describe the data generated by this function."""

    data = np.zeros((size,size,size))
    mid = size/2
    data[mid-8:mid+8, mid-8:mid+8] = 100.0

    return data

def point27(data, iterations):
    """TODO: Describe the benchmark."""
    
    active  = no_border(data, 1)
    stencil = D3P27(data)
    for _ in xrange(iterations):
        active[:] = sum(stencil)/27.0

    return active

if __name__ == "__main__":
    """
    Example parameter: --size=400*10.
    This will execute on a 400x400x400 dataset for 10 iterations.
    """
    B = util.Benchmark()        # Benchmark setup
    (N, I) = B.size
    data = point27_init(N)
    data + 1                    # Ensure data is in the correct space
    B.start()                   # Benchmark run, timing, pprint
    result = point27(data, I)
    B.stop()
    B.pprint()
