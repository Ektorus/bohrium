<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(ProjectDir)..\buildsupport\Newtonsoft.Json.dll" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web" #>
#region Copyright
/*
This file is part of Bohrium and copyright (c) 2012 the Bohrium
team <http://www.bh107.org>.

Bohrium is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 
of the License, or (at your option) any later version.

Bohrium is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the 
GNU Lesser General Public License along with Bohrium. 

If not, see <http://www.gnu.org/licenses/>.
*/
#endregion


/*
 *
 * This file was generated by a tool from OpCodes.tt, do not modify!
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace NumCIL.Bohrium
{
	///<summary>
	/// Defines all the opcodes found in Bohrium
	///</summary>
	public enum bh_opcode : long
	{
<#
		string path = null; 
		
		try { path = this.Host.ResolvePath(System.IO.Path.Combine("..", "..", "..", "core", "codegen", "opcodes.json")); }
		catch (Exception ex){ WriteLine("\t\t#warning: Failed to read file: " + ex.Message);}

		if (path != null)
			path = System.IO.Path.GetFullPath(path);

		bool realbuild = path != null && System.IO.File.Exists(path);
		if (realbuild)
		{
			using (var tr = new System.IO.StreamReader(path))
			using (Newtonsoft.Json.JsonReader rd = new Newtonsoft.Json.JsonTextReader(tr))
			{
				//Skip all comments
				rd.Read();
				while(rd.TokenType == Newtonsoft.Json.JsonToken.Comment)
					rd.Read();

				Newtonsoft.Json.Linq.JArray ja = Newtonsoft.Json.Linq.JArray.Load(rd);

				foreach (var opcode in ja)
				{
					if (opcode is Newtonsoft.Json.Linq.JObject)
					{
						string comment = "";
						string example = "";
						try { comment = (string)opcode["doc"]; }
						catch { }
						try { example = (string)opcode["code"]; }
						catch { }

						string name =  (string)opcode["opcode"];
						long id = (long)opcode["id"];

						WriteLine("\t\t///<summary>");
						if (!string.IsNullOrEmpty(comment))
							WriteLine("\t\t/// " + System.Web.HttpUtility.HtmlEncode(comment));
						if (!string.IsNullOrEmpty(example))
							WriteLine("\t\t/// Example: " + System.Web.HttpUtility.HtmlEncode(example));
						WriteLine("\t\t///</summary>");
						WriteLine("\t\t" + name + " = " + id + ",");
					}
				}
                    
			}
		}
		else
		{
			WriteLine("\t\t#warning Config file not found: '" + path + "', using dummy values");
			foreach(var s in new string[] {"ADD", "SUBTRACT", "DIVIDE", "MULTIPLY", "MOD", "MAXIMUM", "MINIMUM", "FLOOR", "CEIL", "RINT", "ABSOLUTE", "SQRT", "EXP", "LOG", "LOG10", "POWER", "NEGATIVE", "IDENTITY", "DISCARD", "SYNC", "FREE", "USERFUNC"})
				WriteLine("\t\tBH_" + s.ToUpper() + " = -1,");
		}

#>
	}
}
