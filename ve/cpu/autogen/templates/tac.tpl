#compiler-settings
directiveStartToken= %
#end compiler-settings
%slurp
#ifndef __BH_VE_CPU_TAC
#define __BH_VE_CPU_TAC
//
//  NOTE: This file is autogenerated based on the tac-definition.
//        You should therefore not edit it manually.
//
#include "stdint.h"

// Bohrium custom types, used of representing
// two inputs in one constant... hopefully we can get
// rid of it... at some point...
typedef struct { uint64_t first, second; } pair_LL; 



typedef enum OPERATION {
    %for $op in $ops
    $addw($op['name']) = ${op['id']}$addsep($op, $ops)
    %end for
} OPERATION;

typedef enum OPERATOR {
    %for $oper in $opers
    $addw($oper['name'],15) = ${oper['id']}$addsep($oper, $opers)
    %end for
} OPERATOR;

typedef enum ETYPE {
    %for $type in $types
    $addw($type['name']) = ${type['id']}$addsep($type, $types)
    %end for
} ETYPE;

typedef enum LAYOUT {
    %for $layout in $layouts
    $addw($layout['name']) = ${layout['id']}$addsep($layout, $layouts)
    %end for
} LAYOUT;   // Uses a single byte

typedef struct tac {
    OPERATION op;       // Operation
    OPERATOR  oper;     // Operator
    uint32_t  out;      // Output operand
    uint32_t  in1;      // First input operand
    uint32_t  in2;      // Second input operand
} tac_t;

typedef struct operand {
    LAYOUT  layout;     // The layout of the data
    void**  data;       // Pointer to pointer that points memory allocated for the array
    void*   const_data; // Pointer to constant
    ETYPE   etype;      // Type of the elements stored
    int64_t start;      // Offset from memory allocation to start of array
    int64_t nelem;      // Number of elements available in the allocation

    int64_t ndim;       // Number of dimensions of the array
    int64_t* shape;     // Shape of the array
    int64_t* stride;    // Stride in each dimension of the array
} operand_t;            // Meta-data for a block argument

#define SCALAR_LAYOUT  (CONSTANT | SCALAR)
#define ARRAY_LAYOUT   (CONTIGUOUS | STRIDED | SPARSE)
#define CONT_COMPATIBLE (CONSTANT | SCALAR | CONTIGUOUS)

#define ARRAY_OPS (MAP | ZIP | REDUCE | SCAN | GENERATE)
#define NBUILTIN_OPS    %echo $len($ops)-1
#define NBUILTIN_OPERS  %echo $len($opers)-1

//
// For fuse-ranges...
typedef struct triplet {
    size_t begin;
    size_t end;
    LAYOUT layout;
} triplet_t;

#endif
