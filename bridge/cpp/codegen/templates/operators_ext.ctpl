#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp
//
//  Binary operators such as:
//  Mapping "a + b" to BH_ADD(t, a, b)
//  Mapping "a + 1.0" to BH_ADD(t, a, 1.0)
//  Mapping "1.0 + a" to BH_ADD(t, 1.0, a)
//
%for $op, $opcode, $optype, $opcount, $typesigs in $data
%if $optype == "operator.ext" and $opcode != "CUSTOM" and $opcount == 3
%for $ret_type, $op1_type, $op2_type in $typesigs

inline multi_array<$ret_type>& operator$op (multi_array<$op1_type>& lhs, multi_array<$op2_type>& rhs)
{
    multi_array<$ret_type>* result;  
    multi_array<$op1_type>* left    = &lhs;
    multi_array<$op2_type>* right   = &rhs;

    if (same_shape(lhs, rhs)) {
        result = &Runtime::instance().temp<$ret_type, $op1_type>(lhs);
    } else {                                    // Broadcasting

        if (lhs.getRank() < rhs.getRank()) {    // Left-handside has lowest rank
            left    = &Runtime::instance().temp_view(lhs);
            right   = &rhs;
            if (!broadcast(lhs, rhs, *left)) {
                throw std::runtime_error("Failed broadcasting.");
            }
            result = &Runtime::instance().temp<$ret_type, $op1_type>(*left);

        } else {                                // Right-handside has lowest rank
            left    = &lhs;
            right   = &Runtime::instance().temp_view(rhs);
            if (!broadcast(rhs, lhs, *right)) {
                throw std::runtime_error("Failed broadcasting.");
            }
            result = &Runtime::instance().temp<$ret_type, $op2_type>(*right);
        }
    }

    result->link();
    Runtime::instance().enqueue((bh_opcode)$opcode, *result, *left, *right);

    return *result;
}

inline multi_array<$ret_type> & operator$op (multi_array<$op1_type>& lhs, const $op2_type& rhs)
{
    multi_array<$ret_type>* result = &Runtime::instance().temp<$ret_type, $op1_type>(lhs); 
    result->link();
    Runtime::instance().enqueue((bh_opcode)$opcode, *result, lhs, rhs);

    return *result;
}

inline multi_array<$ret_type> & operator$op (const $op1_type& lhs, multi_array<$op2_type>& rhs)
{
    multi_array<$ret_type>* result = &Runtime::instance().temp<$ret_type, $op2_type>(rhs);
    result->link();
    Runtime::instance().enqueue((bh_opcode)$opcode, *result, lhs, rhs);

    return *result;
}
%slurp
%end for
%end if
%slurp
%end for

//
//  Unary operators such as:
//  Mapping "!a" to BH_NEGATE(t, a)
//
%for $op, $opcode, $optype, $opcount, $typesigs in $data
%if $optype == "operator.ext" and $opcode != "CUSTOM" and $opcount == 2

template <typename T>
inline multi_array<T> & operator$op (multi_array<T>& rhs)
{
    multi_array<T>* result = &Runtime::instance().temp<T,T>(rhs);
    result->link();

    Runtime::instance().enqueue((bh_opcode)$opcode, *result, rhs);

    return *result;
}
%slurp
%end if
%end for

