<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.InteropServices;

namespace NumCIL.Unsafe
{
    public static class Copy
    {
<# foreach(string typename in new string[] {"SByte", "Byte", "Int16", "UInt16", "Int32", "UInt32", "Int64", "UInt64", "Single", "Double"}) 
{ 
	int elsize = System.Runtime.InteropServices.Marshal.SizeOf(Type.GetType("System." + typename));
#>
        public static void Memcpy(System.<#=typename#>[] target, IntPtr source, long count) { unsafe { fixed (System.<#=typename#>* t = target) { Inner.Memcpy(t, source.ToPointer(), <#=elsize#>, count); } } }
        public static void Memcpy(IntPtr target, System.<#=typename#>[] source, long count) { unsafe { fixed (System.<#=typename#>* s = source) { Inner.Memcpy(target.ToPointer(), s, <#=elsize#>, count); } } }
<# 
} 
#>
        private static unsafe class Inner
        {
            public static void Memcpy(void* target, void* source, int elsize, long count)
            {
                unsafe
                {
                    long bytes = elsize * count;
                    if (bytes % 8 == 0)
                    {
                        ulong* a = (ulong*)source;
                        ulong* b = (ulong*)target;
                        long els = bytes / 8;
                        for (long i = 0; i < els; i++)
                            b[i] = a[i];
                    }
                    else if (bytes % 4 == 0)
                    {
                        uint* a = (uint*)source;
                        uint* b = (uint*)target;
                        long els = bytes / 4;
                        for (long i = 0; i < els; i++)
                            b[i] = a[i];
                    }
                    else if (bytes % 2 == 0)
                    {
                        ushort* a = (ushort*)source;
                        ushort* b = (ushort*)target;
                        long els = bytes / 2;
                        for (long i = 0; i < els; i++)
                            b[i] = a[i];
                    }
                    else
                    {
                        byte* a = (byte*)source;
                        byte* b = (byte*)target;
                        long els = bytes;
                        for (long i = 0; i < els; i++)
                            b[i] = a[i];
                    }
                }
            }
        }
    }
}
