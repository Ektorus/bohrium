#!/usr/bin/env python
"""
/*
This file is part of Bohrium and copyright (c) 2012 the Bohrium
http://bohrium.bitbucket.org

Bohrium is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation, either version 3
of the License, or (at your option) any later version.

Bohrium is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the
GNU Lesser General Public License along with Bohrium.

If not, see <http://www.gnu.org/licenses/>.
*/
"""

from distutils.core import setup, Extension
from distutils.command.build import build
import os
import sys
import stat
import pprint
import json
import numpy as np

#We overload the setup.py with a 'libpath=' argument that
#points to the library root
lib_path = None
for i,arg in enumerate(sys.argv):
    if arg.startswith("libpath="):
        lib_path = arg[len("libpath="):]
        sys.argv.pop(i)

def libpath(*args):
    if lib_path is None:
        return os.path.join(*args)
    else:
        return os.path.join(lib_path, *args)

def path(*args):
    prefix = os.path.abspath(os.path.dirname(__file__))
    assert len(prefix) > 0
    return os.path.join(prefix, *args)

def get_timestamp(f):
    st = os.stat(f)
    mtime = st[stat.ST_MTIME] #modification time
    return mtime

def set_timestamp(f,timestamp):
    os.utime(f,(timestamp,timestamp))

#Returns the numpy data type name
def dtype_bh2np(bh_type_str):
    return bh_type_str[3:].lower()#Remove BH_ and convert to lower case

#Merge bhc.i.head with the bh_c.h to create our SWIG interface bhc.i
time = 0
with open(path("bhc.i"), 'w') as outfile:
    for fname in [path("bhc.i.head"),path("..","c","codegen","output","bh_c.h")]:
        t = get_timestamp(fname)
        if t > time:
            time = t
        with open(fname) as infile:
            for line in infile:
                outfile.write(line)
set_timestamp(path("bhc.i"),time)

#Create the _info.py file
time = get_timestamp(path('setup.py'))
with open(path("_info.py"), 'w') as o:
    #Write header
    o.write("#This file is auto generated by the setup.py\n")
    o.write("import numpy as np\n")

    #Find Bohrium-C opcode names
    t = get_timestamp(path('..','c','codegen','operators.json'))
    if t > time:
        time = t
    bhc_name = {}
    with open(path('..','c','codegen','operators.json'), 'r') as f:
        opcodes = json.loads(f.read())
        for _, opcode, name, _ in opcodes:
            bhc_name[opcode] = name

    #Find number of operands and type signature for each Bohrium opcode
    #that Bohrium-C supports
    t = get_timestamp(path('..','..','core','codegen','opcodes.json'))
    if t > time:
        time = t
    nops = {}
    type_sig = {}
    with open(path('..','..','core','codegen','opcodes.json'), 'r') as f:
        opcodes = json.loads(f.read())
        for op in opcodes:
            if op['elementwise'] and op['opcode'] in bhc_name:
                nops[op['opcode']] = int(op['nop'])
                #Convert the type signature to bhc names
                type_sig[op['opcode']] = []
                for sig in op['types']:
                    type_sig[op['opcode']].append([dtype_bh2np(s) for s in sig])

    #Write the opcode info
    op = {}
    for opcode in bhc_name.iterkeys():
        numpy_name = opcode.lower()[3:]#Removing BH_ and we have the NumPy name
        op[numpy_name] = {'np_name':  numpy_name,
                          'bhc_name': bhc_name[opcode],
                          'nop':      nops[opcode],
                          'type_sig': type_sig[opcode]}
    o.write("op = ")
    pp = pprint.PrettyPrinter(indent=2, stream=o)
    pp.pprint(op)

    #Find and write all supported data types
    t = get_timestamp(path('..','..','core','codegen','types.json'))
    if t > time:
        time = t
    s = "numpy_types = ["
    with open(path('..','..','core','codegen','types.json'), 'r') as f:
        types = json.loads(f.read())
        for t in types:
            if t['numpy'] == "unknown":
                continue
            s += "np.dtype('%s'), "%t['numpy']
        s = s[:-2] + "]\n"
    o.write(s)
set_timestamp(path("_info.py"),time)

#We need to make sure that the extensions is build before the python moudle because of SWIG
class CustomBuild(build):
    sub_commands = [
        ('build_ext', build.has_ext_modules),
        ('build_py', build.has_pure_modules),
        ('build_clib', build.has_c_libraries),
        ('build_scripts', build.has_scripts),
    ]

setup(name='Bohrium',
      version='0.1',
      description='Bohrium NumPy',
      long_description='Bohrium NumPy',
      author='The Bohrium Team',
      author_email='contact@bh107.org',
      url='http://www.bh107.org',
      license='LGPLv3',
      platforms='Linux, OSX',
      cmdclass={'build': CustomBuild},
      package_dir={'bohrium': path('')},
      packages=['bohrium', 'bohrium.examples'],
      ext_package='bohrium',
      ext_modules=[Extension(name='_bhmodule',
                             sources=[path('_bhmodule.c')],
                             depends=[path('types.c'), path('types.h'), path('operator_overload.c')],
                             include_dirs=[path('..','c','codegen','output'),
                                           path('..','..','include')],
                             libraries=['dl','bhc', 'bh'],
                             library_dirs=[libpath('..','c'),
                                           libpath('..','..','core')],
                             ),
                   Extension(name='_bhc',
                             sources=[path('bhc.i')],
                             include_dirs=[path('..','c','codegen','output'),
                                           path('..','..','include')],
                             libraries=['dl','bhc', 'bh'],
                             library_dirs=[libpath('..','c'),
                                           libpath('..','..','core')],
                             )],
     )
