Running gen_opcodes.py will generate include/cphvb_opcode.h and core/cphvb_opcode.c

The file ''opcodes.json'' contains a definition of all opcodes in cphVB,
it uses the JSON (JavaScript Object Notation) syntax <http://json.org>.

The file contains a list of opcode definitions on the form::

    {
        "_opcode":  "CPHVB_ADD", 
        "doc":      "Add arguments element-wise.",
        "code":     "op1 = op2 + op3",
        "nop":      3, 
        "system_opcode": false, 
        "types": [
            ["CPHVB_BOOL", "CPHVB_BOOL", "CPHVB_BOOL"],
            ["CPHVB_FLOAT32", "CPHVB_FLOAT32", "CPHVB_FLOAT32"],
            ["CPHVB_UINT8", "CPHVB_UINT8", "CPHVB_UINT8"],
        ]
    } 

A description of the opcode structure follows::

_opcode
  The unique symbol identifying a cphVB opcode.
doc
  A textual description of the opcode.
code
  A bried code-snippet illustrating the opcode-instruction.
nop
  The amount of operands the instruction uses.
system_opcode
  Specifies whether a given opcode is a regular arithmetic instruction or a special system instruction.
types
  A list of lists, where each list is a valid type-signature for the opcode. In the example above the ADD opcode can add bools, floats and unsigned short integers. NB: the first type is the output type and the rest is the input types.

NOTE:: opcodes with multiple inputs should always have identical input-data types!

